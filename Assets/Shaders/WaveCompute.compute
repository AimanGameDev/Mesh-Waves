#pragma kernel CSMain

// Buffers
RWStructuredBuffer<float> previousAmplitudes;
RWStructuredBuffer<float> currentAmplitudes;
RWStructuredBuffer<float> visualizerAmplitudes;

// Parameters
uint _Width;
uint _Height;
float _Damping;
uint _CurrentBuffer;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Width * _Height) return;

    uint x = id.x % _Width;
    uint y = id.x / _Width;
    
    uint hasLeft = x > 0;
    uint hasRight = x < (_Width - 1);
    uint hasUp = y > 0;
    uint hasDown = y < (_Height - 1);

    float current, left, right, up, down;
    
    if (_CurrentBuffer == 0)
    {
        left = previousAmplitudes[id.x - hasLeft] * hasLeft;
        right = previousAmplitudes[id.x + hasRight] * hasRight;
        up = previousAmplitudes[id.x - (hasUp * _Width)] * hasUp;
        down = previousAmplitudes[id.x + (hasDown * _Width)] * hasDown;
        current = currentAmplitudes[id.x];
    }
    else
    {
        left = currentAmplitudes[id.x - hasLeft] * hasLeft;
        right = currentAmplitudes[id.x + hasRight] * hasRight;
        up = currentAmplitudes[id.x - (hasUp * _Width)] * hasUp;
        down = currentAmplitudes[id.x + (hasDown * _Width)] * hasDown;
        current = previousAmplitudes[id.x];
    }

    float newAmplitude = (left + right + up + down) / 2.0 - current;
    newAmplitude *= _Damping;

    if (_CurrentBuffer == 0)
    {
        currentAmplitudes[id.x] = newAmplitude;
    }
    else
    {
        previousAmplitudes[id.x] = newAmplitude;
    }
    
    visualizerAmplitudes[id.x] = newAmplitude;
}
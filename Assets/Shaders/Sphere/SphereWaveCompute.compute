#pragma kernel CSMain

// Buffers
StructuredBuffer<int> adjacentAmplitudesIndices;
StructuredBuffer<float> inputAmplitudes;
RWStructuredBuffer<float> previousAmplitudes;
RWStructuredBuffer<float> currentAmplitudes;
RWStructuredBuffer<float> visualizerAmplitudes;

// Parameters
float _Damping;
uint _CurrentBuffer;
uint _VertexCount;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _VertexCount) return;

    uint adjacentAmplitudeIndex = id.x * 7;
    float adjacentAmplitudesSum = 0.0;
    float currentAmplitude = 0.0;

    if (_CurrentBuffer == 0)
    {
        currentAmplitude = currentAmplitudes[id.x];
        for (int i = 1; i <= 6; i++)
        {
            int neighborIndex = adjacentAmplitudesIndices[adjacentAmplitudeIndex + i];
            float neighborAmplitude = neighborIndex == -1 ? 0.0 : previousAmplitudes[neighborIndex];
            adjacentAmplitudesSum += neighborAmplitude;
        }
    }
    else
    {
        currentAmplitude = previousAmplitudes[id.x];
        for (int i = 1; i <= 6; i++)
        {
            int neighborIndex = adjacentAmplitudesIndices[adjacentAmplitudeIndex + i];
            float neighborAmplitude = neighborIndex == -1 ? 0.0 : currentAmplitudes[neighborIndex];
            adjacentAmplitudesSum += neighborAmplitude;
        }
    }

    float newAmplitude = inputAmplitudes[id.x] + (adjacentAmplitudesSum / 3.0) - currentAmplitude;
    newAmplitude *= _Damping;
    newAmplitude = clamp(newAmplitude, -1.0, 1.0);

    if (_CurrentBuffer == 0)
    {
        currentAmplitudes[id.x] = newAmplitude;
    }
    else
    {
        previousAmplitudes[id.x] = newAmplitude;
    }
    
    visualizerAmplitudes[id.x] = newAmplitude;
}
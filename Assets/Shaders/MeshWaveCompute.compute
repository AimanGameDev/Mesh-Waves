#pragma kernel CSMain

// Buffers
StructuredBuffer<int> adjacentIndicesBuffer;
StructuredBuffer<float> inputBuffer;
RWStructuredBuffer<float> previousBuffer;
RWStructuredBuffer<float> currentBuffer;
RWStructuredBuffer<float> visualizerBuffer;

// Parameters
float _Damping;
uint _CurrentBufferSelector;
uint _VertexCount;
uint _MaxNeighbors;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _VertexCount) return;

    uint adjacentAmplitudeBaseIndex = id.x * (_MaxNeighbors + 1);

    float currentBufferValue = currentBuffer[id.x];
    float previousBufferValue = previousBuffer[id.x];
    float currentAmplitude = _CurrentBufferSelector * previousBufferValue + (1.0 - _CurrentBufferSelector) * currentBufferValue;

    float adjacentAmplitudesSum = 0.0;

    for (uint i = 1; i <= _MaxNeighbors; i++)
    {
        int neighborIndex = adjacentIndicesBuffer[adjacentAmplitudeBaseIndex + i];
        float isValid = (float)(neighborIndex != -1);
        neighborIndex = neighborIndex * isValid + id.x * (1.0 - isValid);
        float neighborAmplitude = _CurrentBufferSelector == 0 ? previousBuffer[neighborIndex] : currentBuffer[neighborIndex];
        neighborAmplitude *= isValid;
        adjacentAmplitudesSum += neighborAmplitude;
    }

    float newAmplitude = inputBuffer[id.x] + (adjacentAmplitudesSum / (_MaxNeighbors / 2.0)) - currentAmplitude;
    newAmplitude *= _Damping;
    newAmplitude = clamp(newAmplitude, -1.0, 1.0);

    currentBuffer[id.x] = _CurrentBufferSelector * currentBufferValue + (1.0 - _CurrentBufferSelector) * newAmplitude;
    previousBuffer[id.x] = _CurrentBufferSelector * newAmplitude + (1.0 - _CurrentBufferSelector) * previousBufferValue;

    visualizerBuffer[id.x] = newAmplitude;
}
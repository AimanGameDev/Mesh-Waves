#pragma kernel CSMain

// Buffers
StructuredBuffer<int> adjacentIndicesBuffer;
StructuredBuffer<float> inputBuffer;
RWStructuredBuffer<float> previousBuffer;
RWStructuredBuffer<float> currentBuffer;
RWStructuredBuffer<float> visualizerBuffer;

// Parameters
float _Damping;
uint _CurrentBuffer;
uint _VertexCount;
uint _MaxNeighbors;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _VertexCount) return;

    uint adjacentAmplitudeIndex = id.x * (_MaxNeighbors + 1);
    float adjacentAmplitudesSum = 0.0;
    float currentAmplitude = 0.0;

    if (_CurrentBuffer == 0)
    {
        currentAmplitude = currentBuffer[id.x];
        for (uint i = 1; i <= _MaxNeighbors; i++)
        {
            int neighborIndex = adjacentIndicesBuffer[adjacentAmplitudeIndex + i];
            float neighborAmplitude = neighborIndex == -1 ? 0.0 : previousBuffer[neighborIndex];
            adjacentAmplitudesSum += neighborAmplitude;
        }
    }
    else
    {
        currentAmplitude = previousBuffer[id.x];
        for (uint i = 1; i <= _MaxNeighbors; i++)
        {
            int neighborIndex = adjacentIndicesBuffer[adjacentAmplitudeIndex + i];
            float neighborAmplitude = neighborIndex == -1 ? 0.0 : currentBuffer[neighborIndex];
            adjacentAmplitudesSum += neighborAmplitude;
        }
    }

    float newAmplitude = inputBuffer[id.x] + (adjacentAmplitudesSum / (_MaxNeighbors / 2.0)) - currentAmplitude;
    newAmplitude *= _Damping;

    if (_CurrentBuffer == 0)
    {
        currentBuffer[id.x] = newAmplitude;
    }
    else
    {
        previousBuffer[id.x] = newAmplitude;
    }
    
    visualizerBuffer[id.x] = newAmplitude;
}